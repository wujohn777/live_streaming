const FormAutoFill = new Vue({
  el: '#app',
  data: {

    // Google Apps Script 部署為網路應用程式後的 URL
    gas: 'https://script.google.com/macros/s/AKfycbywEcQWgE3iazaY0kMSANZLNU2LYhZYsyqYu28qCj55PqUszAI/exec', // 根據帳密查詢區組資料
    gas1: 'https://script.google.com/macros/s/AKfycbwThgILTfFSYMxneMlnlHPV3EEEAARaiKY4N6vCmFKTfE0P_J4y/exec', // 根據小組姓名查詢UUID

    id: '', // 帳號
    password: '', // 密碼
    pass: false, // 檢核通過 
    view_date : '', // 收看日期
    view: [], // 保存拆解各日期的陣列
    url: '', // 訂閱網址

    // 避免重複 POST，存資料用的
    persons: {},

    // 頁面上吐資料的 data
    person: {},

    // Google Form 的 action URL
    formAction: 'https://docs.google.com/forms/u/0/d/e/1FAIpQLSc7YmUz1Axd2ipaLxoxAkbI2MHIZUpCHY-IN7yNtvK-nDr9Jw/formResponse',
    formSendAction: 'https://docs.google.com/forms/u/0/d/e/1FAIpQLScz8_iEBuo2JXw1c5kimf8uWph7XuIcwfkV51zQYevhxurHwQ/formResponse',

    // Google Form 各個 input 的 name
    input: {
      zone: 'entry.1537494240',
      cell: 'entry.1013553506',
      leader: 'entry.1480730956',
      name: 'entry.513243022',
      kind: 'entry.1620297305',
      view_date: 'entry.1727888953',
      reason: 'entry.262096140',
      memo: 'entry.289920083',
      uuid: 'entry.1507406262'
    },

        // Google Form 各個 input 的 name
    sendLine: {
      kind: 'entry.637495018',
      view_date: 'entry.1302141518',
      uuid: 'entry.361305783'
    },

    // loading 效果要不要顯示
    loading: false
  },
  methods: {
    // 若帳號和密碼輸入了,則查詢相關資訊
    getInfo() {
    	if (this.id.trim() != "" && this.password.trim() != "") {
	        // this.persons 裡沒這筆資料，才 POST
	        if (this.persons[this.id] === undefined) {
	           this.loading = true;
	           let uri = this.gas + '?id=' + this.id + '&password=' + this.password ;
	           fetch(uri, {
  	             method: 'POST'
	             }).then(res => res.json())
	             .then(res => {
	               if (Object.keys(res).length === 0) {
	               	  // 清空輸入的帳密
	               	  this.id = ""
	               	  this.password = ""
	               	  // 提示訊息
	               	  alert('請確認輸入的帳號或密碼是正確的!!!');
	               } else {
		              this.persons[this.id] = res; // 把這次查詢的 id 結果存下來
		              this.person = res;
                  this.person.kind = "";
                  this.url = "";
		              this.pass = true;
		           }
	               this.loading = false;
	           })
	        }
	        // this.persons 裡有資料就吐資料
	        else {
	          this.person = this.persons[this.id];
	        }
    	}
    },    
    // 檢核表單
    verify() {

      var name = (this.person.name == undefined) ? "" : this.person.name.trim();
      var reason = (this.person.reason == undefined) ? "" : this.person.reason.trim();
      var Today = moment(); // 今天日期
      var tomorrow = moment().add(1,"d"); // 明天日期
      var thisWeekend = false; // 本週登記截止
      var year = Today.format("YYYY");
      var deadline = moment().add(2, "M");

      // 檢核姓名是否為空且需大於2個字小於4個字
      if (name == undefined) {
        alert("【姓名】 不得為空");
        return false
      }

      // 檢核姓名是否大於2個字小於4個字
      if (name.length < 2 || name.length > 4)  {
        alert("【姓名】 必須在2~4個字之間");
        return false
      }

      // 檢核聚會類型是否為空
      if (this.person.kind == "" || this.person.kind == undefined)  {
        alert("請選擇 【聚會類型】");
        return false
      }

      // 檢核無法實體聚會原因是否為空
      if (reason == "")  {
        alert("請選擇填寫 【無法實體聚會原因】");
        return false
      }

      // 檢核收看日期是否為空
      if (view_date.value == "")  {
        alert("請選擇 【收看日期】");
        return false;
      }

      // 當週最晚截止日是週六中午12:00前
      if ((Today.format("dddd") == "Saturday" && Today.format("HH-mm") > "12:00") || Today.format("dddd") == "Sunday") {
         thisWeekend = true;
      }

      // 分割日期字串成陣列
      this.view = view_date.value.split(",");

      // 逐一判斷輸入的日期是否有誤
      for (let i = 0; i < this.view.length; i++) {
        // 增加年份(跨年處理)
        if (moment(year + '-' + this.view[i]).format("YYYY-MM-DD") < Today.format("YYYY-MM-DD")) {
          this.view[i] = moment(year + '-' + this.view[i]).add(1, 'y');
        } else {
          this.view[i] = moment(year + '-' + this.view[i]);
        }

        // 日期必須大於等於今天的日期
        if (this.view[i].format("YYYY-MM-DD") < Today.format("YYYY-MM-DD")) {
           alert("必須大於等於今天的日期，請再確認 【收看日期】！！");
           return false;
        }

        // 當週預約必須在週六中午12:00前
        if ( thisWeekend && (this.view[i].format("YYYY-MM-DD") == Today.format("YYYY-MM-DD") || this.view[i].format("YYYY-MM-DD") == tomorrow.format("YYYY-MM-DD"))) {
           alert("要預約本週直播，【收看日期】" + this.view[i].format("YYYY-MM-DD") +  " 必須在本週六中午12:00前完成，請再確認！！");
           return false;
        }

        // 若為成人或青年崇拜則檢核日期是否為週六或週日
        if ((this.person.kind == "成人崇拜" || this.person.kind == "青年崇拜") && (this.view[i].format("dddd") != "Saturday" && this.view[i].format("dddd") != "Sunday"))  {
           alert("【收看日期】" + this.view[i].format("YYYY-MM-DD") +  "必須是週六或週日，請再確認！！");
           return false;
        }

        // 若為合心會則檢核日期是否為週三
         if ((this.person.kind == "合心會"))  {
           // console.log()
           return false;
        }

        // 限制登記以2個月內的聚會為主
        if (this.view[i].format("YYYY-MM-DD") >= deadline.format("YYYY-MM-DD")) {
          alert("【收看日期】 " + this.view[i].format("YYYY-MM-DD") + " 必須在截止日 " + deadline.format("YYYY-MM-DD") + " 之前，請再確認！！");
          return false;
        }

      }

      return true;
    },    
    // 送出表單
    async submit() {

      let uuid = "";
      let params = "";
      let record = false; // 之前登記與否


      // this.loading = true;
      if (this.verify()) {
         this.url = "";

         // 判斷之前是否已訂閱過(根據組名和姓名) 
         await fetch(this.gas1 + '?cell=' + this.person.cell + '&name=' + this.person.name, {
             method: 'POST'
            }).then(res => res.json())
              .then(res => {
                if (res.uuid == "") { // 未訂閱
                   uuid = this._uuid();
                } else { // 已訂閱
                   uuid = res.uuid; 
                   record = true;
                }
              })

        // 寫入發送表單
        for (let i = 0; i < this.view.length; i++) {
          params = `${this.sendLine.kind}=${this.person.kind}&${this.sendLine.view_date}=${this.view[i].format("YYYY-MM-DD")}&${this.sendLine.uuid}=${uuid}`;
          await fetch(this.formSendAction + '?' + params, {
            method: 'POST'
          })
          .catch(err => {
          });
        }

        // 填入回報表單
        params = `${this.input.leader}=${this.person.leader}&${this.input.zone}=${this.person.zone}&${this.input.cell}=${this.person.cell}&${this.input.name}=${this.person.name}&${this.input.kind}=${this.person.kind}&${this.input.view_date}=${view_date.value}&${this.input.reason}=${this.person.reason}&${this.input.memo}=${this.person.memo || ""}&${this.input.uuid}=${uuid}`;
        await fetch(this.formAction + '?' + params, {
           method: 'POST'
        }).catch(err => {
           if (record) {
             alert('登記成功，當事人之前已訂閱過!!');             
           } else {
             this.url = "https://notify-bot.line.me/oauth/authorize?response_type=code&scope=notify&response_mode=form_post&client_id=2PsYA9ulcJXCq32yxtpGBQ&redirect_uri=https://script.google.com/macros/s/AKfycbxMjv4WQ9U-xA8mmBtVzYKDwHTlMt09W7ob0902B9rsammgJH2r/exec&state=" + uuid;
             alert('登記成功，請複製【通知訂閱網址】傳給當事人訂閱，系統才能發送訊息給他！');
           }
           this.id = '';
           this.password = '';
           view_date.value = '';
           this.person = {};
        });
        this.pass = false;
      }
    },
    // 產生唯一識別碼
    _uuid() {
      var d = Date.now();
      if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
        d += performance.now(); //use high-precision timer if available
      }
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
          return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
      });
    }
  }
})